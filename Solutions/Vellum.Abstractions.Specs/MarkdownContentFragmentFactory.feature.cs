// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Vellum.Abstractions.Specs
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MarkdownContentFragmentFactoryFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "MarkdownContentFragmentFactory", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "MarkdownContentFragmentFactory.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 3
#line hidden
            global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                        "document",
                        "file"});
            table13.AddRow(new string[] {
                        "How serverless is replacing the data warehouse",
                        "azure-synapse-analytics-how-serverless-is-replacing-the-data-warehouse.md"});
#line 5
  await testRunner.GivenAsync("the following markdown files", ((string)(null)), table13, "Given ");
#line hidden
            global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                        "document",
                        "file"});
            table14.AddRow(new string[] {
                        "How serverless is replacing the data warehouse",
                        "azure-synapse-analytics-how-serverless-is-replacing-the-data-warehouse.html"});
#line 9
  await testRunner.GivenAsync("the following html files", ((string)(null)), table14, "Given ");
#line hidden
            global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                        "ContentType",
                        "Id",
                        "SpecPath"});
            table15.AddRow(new string[] {
                        "application/vnd.vellum.content.blogs+md",
                        "Blogs",
                        "../../azure-synapse-analytics-how-serverless-is-replacing-the-data-warehouse.md"});
#line 13
  await testRunner.GivenAsync("the following content blocks", ((string)(null)), table15, "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Converting a Markdown Document into a ContentFragment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MarkdownContentFragmentFactory")]
        public async System.Threading.Tasks.Task ConvertingAMarkdownDocumentIntoAContentFragment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Converting a Markdown Document into a ContentFragment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
#line 18
  await testRunner.GivenAsync("the \"Blogs\" ContentBlocks", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
  await testRunner.AndAsync("the \"How serverless is replacing the data warehouse\" document", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
  await testRunner.WhenAsync("Create a Content Fragment", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "ContentType",
                            "Date",
                            "Hash",
                            "Id",
                            "Position",
                            "PublicationStatus",
                            "BodyHtmlDocumentName"});
                table16.AddRow(new string[] {
                            "application/vnd.vellum.content.blogs+md",
                            "2020-07-15 06:30:00",
                            "a8297eeb1841adf4d4f71efe2d7a43f5cba3a357eda570feeb02f5527619a130",
                            "Blogs",
                            "0",
                            "Published",
                            "How serverless is replacing the data warehouse"});
#line 21
  await testRunner.ThenAsync("Content Fragment should contain", ((string)(null)), table16, "Then ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Title",
                            "Slug",
                            "Author",
                            "HeaderImageUrl",
                            "Excerpt",
                            "FilePath"});
                table17.AddRow(new string[] {
                            "Azure Synapse Analytics: How serverless is replacing the data warehouse",
                            "azure-synapse-analytics-how-serverless-is-replacing-the-data-warehouse",
                            "James.Broome",
                            "/assets/images/blog/2020/07/header-azure-synapse-analytics-how-severless-is-repla" +
                                "cing-the-data-warehouse.png",
                            "Serverless data architectures enable leaner data insights and operations. How do " +
                                "you reap the rewards while avoiding the potential pitfalls?",
                            "C:\\_Projects\\OSS\\vellum-dotnet\\vellum-cli\\Solutions\\Vellum.Abstractions.Specs\\Mar" +
                                "kdownDocuments\\azure-synapse-analytics-how-serverless-is-replacing-the-data-ware" +
                                "house.md"});
#line 24
  await testRunner.AndAsync("the Content Fragment MetaData should contain", ((string)(null)), table17, "And ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "Value"});
                table18.AddRow(new string[] {
                            "Azure"});
                table18.AddRow(new string[] {
                            "Analytics"});
                table18.AddRow(new string[] {
                            "Big Compute"});
                table18.AddRow(new string[] {
                            "Big Data"});
                table18.AddRow(new string[] {
                            "Azure Synapse Analytics"});
                table18.AddRow(new string[] {
                            "Innovation"});
                table18.AddRow(new string[] {
                            "Architecture"});
                table18.AddRow(new string[] {
                            "Strategy"});
#line 27
  await testRunner.AndAsync("the Content Fragment MetaData Category should contain", ((string)(null)), table18, "And ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Key"});
                table19.AddRow(new string[] {
                            "Azure"});
                table19.AddRow(new string[] {
                            "Data"});
                table19.AddRow(new string[] {
                            "Analytics"});
                table19.AddRow(new string[] {
                            "Serverless"});
                table19.AddRow(new string[] {
                            "Azure Synapse"});
                table19.AddRow(new string[] {
                            "Azure Synapse Analytics"});
                table19.AddRow(new string[] {
                            "Azure Synapse Pipelines"});
                table19.AddRow(new string[] {
                            "Synapse Pipelines"});
                table19.AddRow(new string[] {
                            "Azure Data Factory"});
                table19.AddRow(new string[] {
                            "Data Factory"});
                table19.AddRow(new string[] {
                            "SQL Serverless"});
                table19.AddRow(new string[] {
                            "SQL on-Demand"});
                table19.AddRow(new string[] {
                            "Synapse Studio"});
                table19.AddRow(new string[] {
                            "Data Engineering"});
                table19.AddRow(new string[] {
                            "Data Prep"});
                table19.AddRow(new string[] {
                            "Azure Synapse Analytics Jumpstart"});
                table19.AddRow(new string[] {
                            "CSV"});
                table19.AddRow(new string[] {
                            "Parquet"});
                table19.AddRow(new string[] {
                            "Json"});
                table19.AddRow(new string[] {
                            "Azure Data Lake Store"});
                table19.AddRow(new string[] {
                            "ADLS"});
#line 37
  await testRunner.AndAsync("the Content Fragment MetaData Tags should contain", ((string)(null)), table19, "And ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "Question",
                            "Answer"});
                table20.AddRow(new string[] {
                            "How do you run an Azure Synapse SQL on-Demand query from Azure Data Factory?",
                            @"Azure Synapse Analytics comes with tabular data stream (TDS) endpoint for SQL on-Demand, meaning you can run SQL queries as if you were talking to any SQL Server or Azure SQL Database. It's therefore possible to use a standard <a href=""https://docs.microsoft.com/en-us/azure/data-factory/copy-activity-overview"">Copy Activity</a> in the same way as you would were you to copy data from <a href=""https://docs.microsoft.com/en-us/azure/data-factory/connector-sql-server"">a Azure SQL Database</a>. The TDS endpoint can be found on the workspace overview tab of your Synapse workspace and is in the format <code><workspace-name>-ondemand.sql.azuresynapse.net</code>. Note that you will be constrained by the language features available with SQL on-Demand. In the future, it is likely that there will be tighter workspace integration along with stored procedure support. This means that you will be able to take advantage of SQL on-Demand features such as <a href=""https://docs.microsoft.com/en-us/azure/synapse-analytics/sql/develop-tables-cetas"">CETAS</a>."});
                table20.AddRow(new string[] {
                            "Question 2",
                            "Answer 2"});
#line 60
  await testRunner.AndAsync("the Content Fragment MetaData FAQs should contain", ((string)(null)), table20, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
